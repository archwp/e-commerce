// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  orders    Orders[]
  payments  Payments[]  // ✅ إضافة العلاقة هنا
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Products {
  id         Int       @id @default(autoincrement())
  name       String
  description String?
  price      Float
  stock      Int
  category   Categories @relation(fields: [categoryId], references: [id])
  categoryId Int
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderItems OrderItems[]
}

model Categories {
  id        Int       @id @default(autoincrement())
  name      String
  products  Products[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id        Int         @id @default(autoincrement())
  user      Member       @relation(fields: [userId], references: [id])
  userId    Int
  totalPrice Float
  status    OrderStatus @default(PENDING)
  items     OrderItems[]
  payment   Payments?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  order     Orders  @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payments {
  id           Int       @id @default(autoincrement())
  order        Orders    @relation(fields: [orderId], references: [id])
  orderId      Int       @unique  // ✅ إضافة @unique لجعل العلاقة 1-1
  user         Member     @relation(fields: [userId], references: [id])
  userId       Int
  paymentMethod PaymentMethod
  status       PaymentStatus @default(PENDING)
  transactionId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  PAYPAL
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}