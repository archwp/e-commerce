generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  messagesSent messages[] @relation(name: "SenderMessages")
  messagesReceived messages[] @relation(name: "ReceiverMessages")
  callsInitiated calls[] @relation(name: "CallerCalls")
  callsReceived calls[] @relation(name: "ReceiverCalls")
  groupCalls groupCallParticipants[]
  roomParticipants roomParticipants[]
  roomMessages roomMessages[] @relation(name: "RoomMessageSender")

 
  hostedRooms rooms[] @relation("HostRooms")  // <--- علاقة مع rooms
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model messages {
  id         Int      @id @default(autoincrement())
  sender     users   @relation(name: "SenderMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   users   @relation(name: "ReceiverMessages", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  replyToMessage   messages? @relation(name: "MessageReplies", fields: [replyToMessageId], references: [id])
  replyMessages   messages[] @relation(name: "MessageReplies")
  replyToMessageId Int?
  createdAt  DateTime @default(now())
}

model roomMessages {
  id         Int      @id @default(autoincrement())
  sender     users   @relation(name: "RoomMessageSender", fields: [senderId], references: [id])
  senderId   Int
  room       rooms   @relation(name: "RoomMessages_Room", fields: [roomId], references: [id]) // ✅ تصحيح العلاقة
  roomId     Int
  content    String
  replyToMessage   roomMessages? @relation(name: "RoomMessageReplies", fields: [replyToMessageId], references: [id])
  replyMessages   roomMessages[] @relation(name: "RoomMessageReplies")
  replyToMessageId Int?
  deletedAt  DateTime?  
  createdAt  DateTime @default(now())
}

model rooms {
  id         Int      @id @default(autoincrement())
  name       String
  host       users   @relation(name: "HostRooms", fields: [hostId], references: [id])
  hostId     Int
  type       RoomType
  isActive   Boolean @default(true)
  maxParticipants Int @default(50)
  closedAt   DateTime?
  createdAt  DateTime @default(now())
  participants roomParticipants[]
  messages roomMessages[] @relation(name: "RoomMessages_Room") // ✅ العلاقة المقابلة
groupCallParticipants groupCallParticipants[] @relation(name: "GroupCallParticipants_Room")

}


model calls {
  id         Int      @id @default(autoincrement())
  caller     users   @relation(name: "CallerCalls", fields: [callerId], references: [id])
  callerId   Int
  receiver   users   @relation(name: "ReceiverCalls", fields: [receiverId], references: [id])
  receiverId Int
  status     CallStatus @default(PENDING)
  startedAt  DateTime?
  endedAt    DateTime?
  createdAt  DateTime @default(now())
}

model groupCallParticipants {
  id        Int      @id @default(autoincrement())
  user      users   @relation(fields: [userId], references: [id])
  userId    Int
 room       rooms   @relation(name: "GroupCallParticipants_Room", fields: [roomId], references: [id])

  roomId    Int
  joinedAt  DateTime?
  leftAt    DateTime?

  
}



model roomParticipants {
  id        Int      @id @default(autoincrement())
  room      rooms   @relation(fields: [roomId], references: [id])
  roomId    Int
  user      users   @relation(fields: [userId], references: [id])
  userId    Int
  role      RoomRole @default(MEMBER)
  isAccepted Boolean @default(false)
  isBanned  Boolean @default(false)
  canSendMessages Boolean @default(true)
  joinedAt  DateTime?
  leftAt    DateTime?
}

enum RoomType {
  AUDIO
  VIDEO
}

enum RoomRole {
  ADMIN
  MEMBER
}

enum CallStatus {
  PENDING
  ONGOING
  COMPLETED
  MISSED
}
