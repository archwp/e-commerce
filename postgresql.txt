. Square Brackets ([ ])
. Curly Braces ({ })
. Parentheses (( ))
Angle Brackets (< >)
Double Brackets ([[ ]])
Backticks (`)
Colon (:)
 Semicolon (;)
  Dot (.)
Comma (,)
Double Slash (//)

CREATE TABLE usr (
    id SERIAL PRIMARY KEY,
    name VARCHAR(244) NOT NULL,
    favlng VARCHAR(244) NOT NULL
);
data type 
SMALLINT -- تتراوح القيم بين -32,768 و 32,767
INTEGER -- تتراوح القيم بين -2,147,483,648 و 2,147,483,647
BIGINT -- تتراوح القيم بين -9223372036854775808 و 9223372036854775807
SERIAL -- متاح في PostgreSQL لإنشاء قيمة تلقائية (مثل AUTO_INCREMENT في MySQL)
Time/Date Types
DATE -- مثل '2023-06-22'
TIMESTAMP --  2023-06-22 12:33:0
CURRENT_TIMESTAMP -- مثل '2023-06-22 12:33:07'
TIME -- مثل '09:50:22'
CHAR(4) -- لتخزين السنة كـ "2024"
String Types
CHAR(255) -- لتخزين نص ثابت الطول يصل إلى 255 حرفًا
VARCHAR(65535) -- لتخزين نص يصل طوله إلى 65535 حرفًا
TEXT -- لتخزين نصوص طويلة جدًا
BYTEA -- لتخزين بيانات ثنائية مثل الصور
CREATE TYPE mood AS ENUM ('happy', 'sad', 'angry');
CREATE TABLE person (
    name TEXT,
    mood mood
);



في PostgreSQL، توفر قاعدة البيانات مجموعة واسعة من أنواع البيانات (`data types`) التي يمكنك استخدامها لتخزين أنواع مختلفة من البيانات. تتنوع هذه الأنواع لتشمل الأرقام، النصوص، التواريخ، القيم الثنائية، وغيرها. إليك شرح لأهم أنواع البيانات المتوفرة في PostgreSQL:

### 1. **أنواع البيانات النصية (Character Types)**

- **`CHAR(n)`**: يُستخدم لتخزين سلاسل نصية ثابتة الطول. إذا كانت السلسلة أقصر من `n`، يتم إضافة مسافات فارغة لتصل إلى الطول المحدد.
  - مثال: `CHAR(5)` سيخزن نصًا مكونًا من 5 أحرف، مع إضافة مسافات فارغة إذا كانت السلسلة أقصر.

- **`VARCHAR(n)`**: يُستخدم لتخزين سلاسل نصية بطول متغير، مع تحديد الحد الأقصى للطول.
  - مثال: `VARCHAR(255)` سيخزن نصًا يصل طوله إلى 255 حرفًا.

- **`TEXT`**: يُستخدم لتخزين نصوص غير محدودة الطول (لا يوجد حد للطول).
  - مثال: يستخدم عادة لتخزين نصوص كبيرة مثل المقالات أو الوصف التفصيلي.

### 2. **أنواع البيانات الرقمية (Numeric Types)**

- **`INTEGER` / `INT`**: يُستخدم لتخزين الأعداد الصحيحة (من -2,147,483,648 إلى 2,147,483,647).
  - مثال: `INTEGER` لتخزين الأعداد الصحيحة العادية.

- **`BIGINT`**: يُستخدم لتخزين الأعداد الصحيحة الكبيرة (من -9223372036854775808 إلى 9223372036854775807).
  - مثال: `BIGINT` يستخدم للأعداد الكبيرة مثل عداد المشاهدات أو المستخدمين.

- **`SMALLINT`**: يُستخدم لتخزين الأعداد الصحيحة الصغيرة (من -32,768 إلى 32,767).
  - مثال: `SMALLINT` يستخدم للأعداد الصغيرة مثل الفئات العمرية.

- **`DECIMAL` / `NUMERIC`**: يُستخدم لتخزين الأرقام العشرية بدقة عالية، مثل الأرقام المالية.
  - مثال: `DECIMAL(10, 2)` يخزن رقمًا يصل إلى 10 خانات مع خانتين عشريتين.

- **`REAL`**: يُستخدم لتخزين الأعداد العشرية ذات الدقة المتوسطة.
  - مثال: `REAL` لتخزين الأعداد العشرية بحد دقة أقل.

- **`DOUBLE PRECISION`**: يُستخدم لتخزين الأعداد العشرية ذات الدقة العالية.
  - مثال: `DOUBLE PRECISION` يستخدم للأرقام التي تتطلب دقة أعلى.

### 3. **أنواع البيانات التاريخ والوقت (Date/Time Types)**

- **`DATE`**: يُستخدم لتخزين التواريخ فقط (اليوم، الشهر، السنة).
  - مثال: `DATE` لتخزين تاريخ مثل `2024-11-26`.

- **`TIME`**: يُستخدم لتخزين الوقت فقط (ساعة، دقيقة، ثانية).
  - مثال: `TIME` لتخزين الوقت مثل `14:30:00`.

- **`TIMESTAMP`**: يُستخدم لتخزين التاريخ والوقت معًا.
  - مثال: `TIMESTAMP` لتخزين التاريخ والوقت مثل `2024-11-26 14:30:00`.

- **`TIMESTAMPTZ`** (Timestamp with Timezone): يُستخدم لتخزين التاريخ والوقت مع المنطقة الزمنية.
  - مثال: `TIMESTAMPTZ` لتخزين الوقت مع المنطقة الزمنية مثل `2024-11-26 14:30:00+03`.

- **`INTERVAL`**: يُستخدم لتخزين فترة زمنية (الفرق بين تاريخين أو أوقات).
  - مثال: `INTERVAL` لتخزين فترات مثل `1 day 2 hours`.

### 4. **أنواع البيانات المنطقية (Boolean Type)**

- **`BOOLEAN`**: يُستخدم لتخزين القيم المنطقية (صحيح/خطأ أو `TRUE/FALSE`).
  - مثال: `BOOLEAN` يمكن أن يخزن إما `TRUE` أو `FALSE`.

### 5. **أنواع البيانات الثنائية (Binary Types)**

- **`BYTEA`**: يُستخدم لتخزين البيانات الثنائية (مثل الصور أو الملفات).
  - مثال: `BYTEA` لتخزين البيانات الثنائية مثل الصور أو المستندات.

### 6. **أنواع البيانات الخاصة (Special Data Types)**

- **`UUID`**: يُستخدم لتخزين المعرفات الفريدة (UUIDs)، وهي تمثل معرّفًا عالميًا فريدًا.
  - مثال: `UUID` لتخزين معرّفات مثل `123e4567-e89b-12d3-a456-426614174000`.

- **`JSON` و `JSONB`**: يُستخدم لتخزين بيانات بتنسيق JSON. `JSONB` هو النسخة الثنائية من `JSON` ويعطي أداءً أفضل في الاستعلامات.
  - مثال:
    ```sql
    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        user_data JSONB
    );
    ```

- **`ARRAY`**: يُستخدم لتخزين مصفوفات من القيم.
  - مثال: `INTEGER[]` لتخزين مصفوفة من الأعداد الصحيحة.

- **`HSTORE`**: يُستخدم لتخزين بيانات في شكل أزواج مفتاح/قيمة. مفيد للبيانات غير المهيكلة.
  - مثال:
    ```sql
    CREATE TABLE products (
        id SERIAL PRIMARY KEY,
        attributes HSTORE
    );
    ```

### 7. **أنواع البيانات الهندسية (Geometric Types)**

- **`POINT`**: يُستخدم لتخزين النقاط في الفضاء ثنائي الأبعاد.
  - مثال: `POINT` لتخزين نقطة مثل `(1, 2)`.

- **`LINE`**: يُستخدم لتخزين الخطوط في الفضاء ثنائي الأبعاد.
  - مثال: `LINE` لتخزين خط مكون من معادلة رياضية.

- **`CIRCLE`**: يُستخدم لتخزين دوائر في الفضاء ثنائي الأبعاد.
  - مثال: `CIRCLE` لتخزين دائرة محددة بنصف القطر والمركز.

- **`POLYGON`**: يُستخدم لتخزين المضلع الذي يحتوي على مجموعة من النقاط.
  - مثال: `POLYGON` لتخزين شكل مضلع.

### 8. **أنواع البيانات الشبكية (Network Types)**

- **`CIDR`**: يُستخدم لتخزين العناوين الشبكية (IP subnets).
  - مثال: `CIDR` لتخزين عنوان الشبكة مثل `192.168.1.0/24`.

- **`INET`**: يُستخدم لتخزين العناوين IP.
  - مثال: `INET` لتخزين عنوان IP مثل `192.168.1.1`.

- **`MACADDR`**: يُستخدم لتخزين عنوان MAC (الذي يتم استخدامه في الشبكات).
  - مثال: `MACADDR` لتخزين عنوان MAC مثل `08:00:2b:01:02:03`.

### 9. **أنواع البيانات المعرفية (Range Types)**

- **`INT4RANGE`**: يُستخدم لتخزين نطاق من الأعداد الصحيحة.
  - مثال: `INT4RANGE` لتخزين نطاق مثل `[1, 100]`.

- **`NUMRANGE`**: يُستخدم لتخزين نطاق من الأعداد العشرية.
  - مثال: `NUMRANGE` لتخزين نطاق من القيم العشرية مثل `[10.5, 20.5]`.

- **`TSRANGE`**: يُستخدم لتخزين نطاق من التواريخ والأوقات.
  - مثال: `TSRANGE` لتخزين فترة زمنية مثل `[2024-11-01, 2024-11-30]`.

